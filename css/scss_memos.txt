

--------------------------SCSS-----------------------------




///////
/用途//
////////////////////////////////////////////////
/SCSSファイルをセーブしたら、CSSファイルにコンパイルする///
////////////////////////////////////////////////
/書式//
////////////////////////////////////
/sass --watch SCSSファイル:CSSファイル//
////////////////////////////////////
/用例//
/////////////////////////////////////
/sass --watch style.scss:style.css///
/（SCSSファイルをCSSファイルに）///////////////////////////
/sass --watch stylesheets/sass:stylesheets/compiled//
/(フォルダごと監視することもできる)/////////////////////////
///////////////////////////////

--------------------------------------------------------

///////
/用途//
////////////////////////////
/アウトプットのスタイルを指定する//
////////////////////////////
/書式////////////////////
/sass --style スタイル名//
////////////////////////
/用例///////////////////////////////////////////////
/sass --style expanded --watch style.scss:style.css////////////////////
/sass --style compressed --watch stylesheets/sass:stylesheets/compiled/
///////////////////////////////////////////////////////////////////////

-------------------------
{セレクタの入れ子}
-------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++
.container{
    background-color: red;
    .span5{
        background-color: pink;
    }
    .span7{
        background-color: orange;
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
プロパティまでも入れ子できちゃう！
-------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++
p{
    background: {
        color: pink;
        image: url('lig.png');
        repeat: repeat-y;
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
「&」セレクタ
-------------------------
ブロック内で「&」という特別のセレクタが使えます。
この「&」は「親セレクタ」と言って、
ブロックの親セレクタを参照することができます。

++++++++++++++++++++++++++++++++++++++++++++++++++++
  a.btn{
      border-radius: 5px;
      background-color: pink;
      &:hover{
          background-color: orange;
      }
  }
+++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
コンパイル後↓
-------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++
a.btn {
  border-radius: 5px;
  background-color: pink;
}
a.btn:hover {
  background-color: orange;
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++


-------------------------
セレクタの継承
-------------------------
セレクタの継承とは、つまり、あるセレクタの内容をそのまま違うセレクタに適用することができるんです。
 例を見てみましょう。

+++++++++++++++++++++++++++++++++++++++++++++++++++++
.p1{
    background-color: gray;
    color: red;
}

.p2{
    @extend .p1; /* .p1のスタイルをそのまま引っ張ってきて */
    border: 1px solid white; /* その上で独自のスタイルを書く */
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
コンパイル後↓
-------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++
.p1, .p2 {
  background-color: gray;
  color: red;
}

.p2 {
  border: 1px solid white;
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++

------------------------
変数
------------------------
Sassでは変数が使えます。
 変数の書き方はCSSチックで、こんなフォーマットになってます。
$変数名: 値;
値にはCSSで使える単位なら何でもOK。

+++++++++++++++++++++++++++++++++++++++++++++++++++++
$foo-width : 10px;
$foo-width : 10%;
$foo-line-height : 10;
$foo-color : red;
$red-shadow : 0 0 3px red;
+++++++++++++++++++++++++++++++++++++++++++++++++++++



-------------------------
Mixin
-------------------------
Sassで最も重要な機能と言っても過言ではないでしょう！
Mixinとは小さなテンプレートみたいなもので、
うまく活用すれば大幅にコード量削減できます！
まずはMixinとは何か、以下のコードを見るのが1番わかりやすいと思います。

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@mixin round-btn{
    border: 1px solid #b8b8b8;
    border-radius: 5px;
    background-color: #c9c9c9;
}

@mixin auto-color($color){
    @include round-btn;
    color:$color;
}

.btn-blue{
    /* mixinブロック内の中身を全て持ってくる */
    @include round-btn;
    color: blue;
}

.btn-red{
    /* こっちは引数を渡してるパターン */
    @include auto-color(red);
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------------
Mixinの書き方
--------------------------------------------------------
3通りあります。以下を見てください。

引数なし@mixin Mixinの名前 {
中身…
}引数あり@mixin Mixinの名前(引数１,引数２…){
中身…
}引数あり（デフォルト値付き）@mixin Mixinの名前(引数１:デフォルト値,引数２:デフォルト値…){
中身…
}
---------------------------------------------------------
---------------------------------------------------------
Mixinの使い方
---------------------------------------------------------
上記の3通りに対応した使い方は以下になります。
先頭にディレクティブ@includeをつけて書いているのに注目してください。
@include Mixin名前;
@include Mixin名前(引数１, 引数２, …);
@include Mixin名前(引数１: 値, 引数２: 値, …);
---------------------------------------------------------
